<?php
/**
 * @link https://github.com/Arza-Studio/yiingine
 * @copyright Copyright (c) 2016 ARZA Studio
 * @license https://github.com/Arza-Studio/yiingine/blob/master/LICENSE.md
 */

namespace yiingine\modules\customFields\behaviors;

/** A class that updates the file path where custom fields save files if their name has changed.*/
class CustomFieldFilePathBehavior extends \yii\base\Behavior
{     
    /** @return array events (array keys) and the corresponding event handler methods (array values). */
    public function events()
    {
        return [
            [\yii\db\ActiveRecord::EVENT_AFTER_UPDATE, 'afterUpdate'],
            [\yii\db\ActiveRecord::EVENT_AFTER_DELETE, 'afterDelete']
        ];
    }
    
    /** Rename the file path if the name of the field has changed.
     *  @param $event Event the event parameters.*/
    public function afterUpdate($event)
    {
        // If the name of the field has not changed.
        if($this->owner->isAttributeChanged('name'))
        {
            return; // Nothing to do.
        }
        
        $staticPath = $this->getStaticPath();
        
        // Rename old directories.
        foreach($this->getDirectoriesToModify() as $directory)
        {
            $newDirectory = $staticPath.str_replace($this->owner->getOldAttribute('name'), $this->owner->name, $directory);
            $directory = $staticPath.$directory;
            
            if(file_exists($newDirectory)) // If the new directory already exist.
            {
                throw new \yii\base\Exception('Could not rename '.$directory.' to '.$newDirectory.' . Destination already exists.');
            }
            
            if(!rename($directory, $newDirectory)) // If renaming failed.
            {
                throw new \yii\base\Exception('Could not rename '.$directory.' to '.$newDirectory.' . Renaming failed.');
            }
        }
    }
    
    /** Delete all files stored by the custom field.
     *  @param $event Event the event parameters.*/
    public function afterDelete($event)
    {
        $staticPath = $this->getStaticPath();
        
        foreach($this->getDirectoriesToModify() as $directory)
        {
            \yii\helpers\FileHelper::removeDirectory($staticPath.$directory);
        }
    }
    
    /** @return string the static part of the path where the directories lie.*/
    protected function getStaticPath()
    {
        /* Since the directory for custom field files is generated by an expression that
         * often depends on a model and its id, use a dummy model here with an easily 
         * recognizable id to generate the path.*/
        $model = new \yiingine\models\ActiveRecordLogEntry();
        $id = uniqid(); // Use a unique id to prevent collision with folder names.
        $model->setPrimaryKey($id);
        
        /* To prevent name collision, the name of the field is temporarily replaced with a unique id.
         * A collision could occur if for instance the directory pattern where file lies is called:
         * "/home/user/website/files/".$field->name"
         * 
         * and the field is named website. In this case, /home/user will be treated as the 
         * directory that contains the files for this field and renamed, which is not the case.
         * */
        $currentName = $this->owner->name;
        $this->owner->name = $uniqueName = uniqid();
        $path = $this->owner->getModule()->factory->createManager($this->owner)->getDirectory($model);
        $this->owner->name = $currentName; // Restore the name.
        
        // Get the static path from the model's path.
        $staticPath = []; 
        foreach(explode(DIRECTORY_SEPARATOR, $path) as $directory)
        {
            // If we have reached a part of the path that is variable.
            if(in_array($directory, [$uniqueName, 'ActiveRecordLogEntry', $id]))
            {
                break; // The path has become variable, stop.    
            }
            
            $staticPath[] = $directory;
        }
        
        return implode($staticPath, DIRECTORY_SEPARATOR);
    }
    
    /** @return array the list of dictories to modify relative to the static path. */
    protected function getDirectoriesToModify()
    {        
        $staticPath = $this->getStaticPath();
        
        if(!is_dir($staticPath)) // If the static path does not exist yet.
        {
            return []; // No files to modify.
        }
        
        // Fetch a list of files within the static directory.
        $directoriesToModify = array();
        foreach(\yii\helpers\FileHelper::findFiles($staticPath) as $directory)
        {
            // Remove the static path to prevent collisions.
            $directory = mb_substr(dirname($directory), mb_strlen($staticPath));
            
            
            if(strpos($directory, $this->owner->getOldAttribute('name')))
            {
                // Save the name of the directory to rename relative to static path.
                $directoriesToModify[] = $directory;
            }    
        }
        
        return $directoriesToModify;
    }
}
